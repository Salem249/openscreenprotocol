<pre class='metadata'>
Title: Open Screen Protocol
Shortname: openscreenprotocol
Level: 1
Status: w3c/ED
ED: https://webscreens.github.io/openscreenprotocol/
Canonical URL: ED
Editor: Mark Foltz, Google, https://github.com/mfoltzgoogle, w3cid 68454
Repository: webscreens/openscreenprotocol
Abstract: The Open Screen Protocol is a suite of network protocols that allow user agents to implement the [[PRESENTATION-API|Presentation API]] and the [[REMOTE-PLAYBACK|Remote Playback API]] in an interoperable fashion.
Group: Second Screen Community Group
Mailing List: public-webscreens@w3c.org
Mailing List Archives: https://lists.w3.org/Archives/Public/public-webscreens/
Markup Shorthands: markdown yes, dfn yes, idl yes
</pre>

<p boilerplate="copyright">
<a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> Â© [YEAR] the Contributors to the [TITLE] Specification, published by the <a href="https://www.w3.org/community/webscreens/">Second Screen Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C Community Contributor License Agreement (CLA)</a>.
A human-readable <a href="http://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.
</p>

<!-- TODO: Add short names to Presentation API spec, so that BS autolinking works as designed. -->
<!-- TODO: Can autolinks to HTML51 be automatically generated? -->
<pre class="anchors">
urlPrefix: https://w3c.github.io/presentation-api/#dfn-; type: dfn; spec: PRESENTATION-API
    text: controller
    text: controlling user agent
    text: controlling browsing context
    text: presentation
    text: presentation display
    text: presentation display availability
    text: presentation id
    text: presentation request url
    text: receiver
    text: receiving browsing context
    text: receiving user agent
urlPrefix: https://w3c.github.io/presentation-api/; type: interface; spec: PRESENTATION-API
    text: PresentationConnection
urlPrefix: https://w3c.github.io/remote-playback/#dfn-; type: dfn; spec: REMOTE-PLAYBACK
    text: remote playback device
urlPrefix: https://www.w3.org/TR/html51/single-page.html; type: dfn; spec: HTML51
    text: media element
</pre>

<h2 class='no-num no-toc no-ref' id='status'>Status of this document</h2>

This specification was published by the [Second Screen Community
Group](https://www.w3.org/community/webscreens/). It is not a W3C Standard nor
is it on the W3C Standards Track. It should not be viewed as a stable
specification, and may change in substantial ways at any time. A future version
of this document will be published as a Community Group Report.

Please note that under the [W3C Community Contributor License Agreement
(CLA)](https://www.w3.org/community/about/agreements/cla/) there is a limited
opt-out and other conditions apply.

Learn more about [W3C Community and Business
Groups](http://www.w3.org/community/).

Introduction {#introduction}
============================

The Open Screen Protocol connects browsers to devices capable of rendering Web
content for a shared audience.  Typically, these are devices like
Internet-connected TVs, HDMI dongles, or "smart" speakers.

The protocol is suite of subsidiary network protocols that enable two user
agents to implement the [[PRESENTATION-API|Presentation API]] and
[[REMOTE-PLAYBACK|Remote Playback API]] in an interoperable fashion.  This means
that a user can expect these APIs work as intended when connecting two devices
from independent implementations of the Open Screen Protocol.

The Open Screen Protocol is a specific implementation of these two APIs, meaning
that it does not handle all possible ways that browsers and presentation
displays could support these APIs.  The Open Screen Protocol specifically
supports browsers and displays that are connected via the same local area
network, and that initiate presentation or remote playback by sending a URL
from the browser to the target display.

The Open Screen Protocol is intended to be extensible, so that additional
capabilities can be added over time.  This may include new implementations of
existing APIs, or new APIs.

Terminology {#terminology}
--------------------------

We borrow terminology from the [[PRESENTATION-API|Presentation API]] and
[[REMOTE-PLAYBACK|Remote Playback API]] for terms used in this document.  These
terms are summarized here.

We call the browser that is used to discover and initiate presentation of Web
content on another device the [=controlling user agent=].  We call the
user agent on the device rendering the Web content the
[=receiving user agent=], or *receiver* for short.  We use
the term [=presentation display=] to refer to the entire platform and
responsible for implementing the *receiver*, including browser, OS, networking,
audio and graphics.

For the [[PRESENTATION-API|Presentation API]], presentation of Web content is
initiated at the request of a [=controlling browsing context=] (or
*controller*), which creates a [=receiving browsing context=] (or
*presentation*) to load a [=presentation request URL=] and exchange messages
with the resulting document.

Before this can happen, the [=controlling user agent=] must determine which
[=receivers=], if any, are compatible with the [=presentation request URL=].  This
happens by determining the [=presentation display availability=] for the
presentation request URL.

For the [[REMOTE-PLAYBACK|Remote Playback API]], the device responsible for
rendering the content of a [=media element=] when remote playback is connected
is called the [=remote playback device=].

For additional terms and idioms specific to the [[PRESENTATION-API|Presentation API]] or
Remote Playback API, please consult the respective specifications.

Requirements {#requirements}
============================

Presentation API Requirements {#requirements-presentation-api}
--------------------------------------------------------------

1.  A controlling user agent must be able to discover the presence of a
    presentation display connected to the same IPv4 or IPv6 subnet and reachable
    by IP multicast.

2.  A controlling user agent must be able to obtain the IPv4 or IPv6 address of
    the display, a friendly name for the display, and an IP port number for
    establishing a network transport to the display.

3.  A controlling user agent must be able to determine if the receiver is
    reasonably capable of rendering a specific [=presentation request URL=].

4.  A controlling user agent must be able to start a new presentation on a receiver given a
    [=presentation request URL=] and [=presentation ID=].

5.  A controlling user agent must be able to create a new
    {{PresentationConnection}} to an existing presentation on the
    receiver, given its [=presentation request URL=] and [=presentation ID=].

6.  It must be possible to to close a {{PresentationConnection}} between a
    controller and a presentation, and signal both parties with the
    reason why the connection was closed.

7.  Multiple controllers must be able to connect to a single presentation
    simultaneously, possibly from from one or more [=controlling user agents=].

8.  Messages sent by the controller must be delivered to the presentation (or
    vice versa) in a reliable and in-order fashion.

9.  If a message cannot be delivered, then the controlling user agent must be
    able to signal the receiver (or vice versa) that the connection should be
    closed with reason `error`.

10. The controller and presentation must be able to send and receive `DOMString`
    messages (represented as `string` type in ECMAScript).

11. The controller and presentation must be able to send and receive binary
    messages (represented as `Blob` objects in HTML5, or `ArrayBuffer` or
    `ArrayBufferView` types in ECMAScript).

12. The controlling user agent must be able to signal to the receiver to
    terminate a presentation, given its [=presentation request URL=] and [=presentation
    ID=].

13. The receiver must be able to signal all connected controlling user agents
    when a presentation is terminated.


Remote Playback API Requirements {#requirements-remote-playback}
----------------------------------------------------------------

Issue(3): Requirements for Remote Playback API

Non-Functional Requirements {#requirements-non-functional}
----------------------------------------------------------

1.  It should be possible to implement an Open Screen presentation display using
    modest hardware requirements, similar to what is found in a low end
    smartphone, smart TV or streaming device. See the [Device
    Specifications](device_specs.md) document for expected presentation display
    hardware specifications.

2.  It should be possible to implement an Open Screen controlling user agent on a
    low-end smartphone. See the [Device Specifications](device_specs.md) document
    for expected controlling user agent hardware specifications.
 
3.  The discovery and connection protocols should minimize power consumption,
    especially on the controlling user agent which is likely to be battery
    powered.
 
4.  The protocol should minimize the amount of information provided to a passive
    network observer about the identity of the user, activity on the controlling
    user agent and activity on the receiver.
 
5.  The protocol should prevent passive network eavesdroppers from learning
    presentation URLs, presentation IDs, or the content of presentation messages
    passed between controllers and presentations.
 
6.  The protocol should prevent active network attackers from impersonating a
    display and observing or altering data intended for the controller or
    presentation.
 
7.  The controlling user agent should be able to discover quickly when a
    presentation display becomes available or unavailable (i.e., when it connects
    or disconnects from the network).
 
8.  The controlling user agent should present sensible information to the user
    when a protocol operation fails.  For example, if a controlling user agent is
    unable to start a presentation, it should be possible to report in the
    controlling user agent interface if it was a network error, authentication
    error, or the presentation content failed to load.
 
9.  The controlling user agent should be able to remember authenticated
    presentation displays.  This means it is not required for the user to
    intervene and re-authenticate each time the controlling user agent connects
    to a pre-authenticated display.
 
10.  Message latency between the controller and a presentation should be minimized
    to permit interactive use.  For example, it should be comfortable to type in
    a form in the controller and have the text appear in the presentation in real
    time.  Real-time latency for gaming or mouse use is ideal, but not a
    requirement.
 
11. The controlling user agent initiating a presentation should communicate its
    preferred locale to the receiver, so it can render the presentation content
    in that locale.
 
12. It should be possible to extend the control protocol (above the discovery and
    transport levels) with optional features not defined explicitly by the
    specification, to facilitate experimentation and enhancement of the base
    APIs.
 

Receiver Discovery {#discovery}
===============================

Issue(100): Incorporate material from the [mDNS](mdns.md) document.

Transport Establishment {#transport}
====================================

Issue(101): Incorporate material from the \[QUIC](quic.md) document.

Authentication {#authentication}
================================

Issue(102): Incorporate material from the \[J-PAKE](j-pake.md) document.

Control Protocols {#control}
============================

Issue(77): Describe CBOR based mechanism for
exchanging control messages, results, and events.


Presentation Protocol {#presentation-protocol}
---------------------------------------------

This section defines the use of the Open Screen Protocol for starting,
stopping, and controlling presenetations as defined by
[[PRESENTATION-API|Presentation API]].  A subsequent section will
define how APIs in [[PRESENTATION-API|Presentation API]] map to the
protocol messages defined in this section.

For all messages defined in this section, see Appendix A for the full
CDDL definitions.

<!-- TODO: Add a capability that indicates support for the
presentation protocol.  
See https://github.com/webscreens/openscreenprotocol/issues/123-->

To learn which receivers are [=available presentation display=]s for a
particular URL or set of URLs, the controller may send a
presentation-url-availability-request message with the following values:

- urls: A list of presentation URLs

- watch-duration: The period of time that the controller is interested in
receiving updates about the URLs, should the availability change.

- watch-id: An identifier the receiver may use when sending updates about URL
availability so that controller knows which URLs the receiver is referring to.

In response, the receiver should send one presentation-url-availability-response
message with the following values:

- url-availabilities: A list of URL availability states (available, unavailable,
or invalid).  Each state must correspond to the matching URL from the request by
list index.


The receivers should later (up to the current time plus request
watch-duration) send presentation-url-availability-event messages if
URL availabilities change.  Such events contain the following values:

- watch-id: The watch-id given in the presentation-url-availability-response,
used to refer to the presentation URLs whose availability has changed.

- url-availabilities: A list of URL availability states (available, unavailable,
or invalid).  Each state must correspond to the URLs from the request referred
to by the watch-id.

Note that these messages are not broadcasted to all controllers. They are sent
individually to controllers that have requested availability for the URLs that
have changed in availability state within the watch duration of the original
availability request.


To save power, the controller may disconnect the QUIC connection and
later reconnect to send availablity requests and receive availability
responses and updates.


To start a presentation, the controller may send a
presentation-start-request message to the receiver with the following
values:

- presentation-id: the presentation identifier

- url: the selected presentation URL

- headers: headers that the receiver should use to fetch the
presentationUrl.  For example, section 6.6.1 of
[[PRESENTATION-API|Presentation API]] says that the Accept-Language
header should be provided.

The presentation ID must follow the restrictions defined by
[[PRESENTATION-API|Presentation API]] section 6.1, in that it must
consist of at least 16 ASCII characters.


When the receiver receives the presentation-start-request, it should send back a
presentation-start-response message after either the presentation URL has been
feteched and loaded or the receiver has failed to do so. If it has failed, it
must respond with the appropriate result (such as invalid-url or timeout).  If
it has succeeded, it must reply with a success result.  Additionally, the
response must include the following:

- connection-id: An ID that both agents can use to send connection messages
to each other.  It is chosen by the receiver for ease of implementation (if the
message receiver chooses the connection-id, it may keep the ID unique across
connections, thus making message demuxing/routing easier).

<!-- TODO: Add optional HTTP response code to the response? -->

To send a presentation message, the controller or receiver may send a
presentation-connection-message with the following values:

- connection-id: The ID from the presentation-start-response or
presentation-connection-open-response messages.

- message: the presentation message data.  


To terminate a presentation, the controller may send a
presentation-termination-request message with the following values:

- presentation-id: The ID of the presentation to terminate.

- reason: The reason the presentation is being terminated.


When a receiving agent receives a presentation-termination-request, it should
send back a presentation-termination-response message to the requesting
agent.  It should also notify other controllers about the termination by sending
a presentation-termination-event message.  And it can send the same message if
it terminates a presentation without a request from a controller to do so. This
message contains the following values:

- presentation-id: The ID of the presentation that was terminated.

- reason: The reason the presentation was terminated.

<!-- TODO: Split up reason into reason and whether it was triggered by the user
or not? -->


To accept incoming connections requests from controller, a receiver
must receive and process the presentation-connection-open-request
message which contains the following values: 

- presentation-id: The ID of the presentation to connect to.

- url: The URL of the presentation to connect to. 


The receiver should, upon receipt of a
presentation-connection-open-request message, send back a
presentation-connection-open-response message which contains the
following values:

- result: a code indicating success or failure, and the reason for the failure

- connection-id: An ID that both agents can use to send connection messages
to each other.  It is chosen by the receiver for ease of implementation (if the
message receiver chooses the connection-id, it may keep the ID unique across
connections, thus making message demuxing/routing easier).


A controller may terminate a connection without terminating the presentation by
sending a presentation-connection-close-request message with the following
values:

- connection-id: The ID of the connection to close.


The receiver should, upon receipt of a presentation-connection-close-request,
send back a presentation-connection-close-response message with the following
values:

- result: If the close succeed or failed, and if it failed why it failed.

The receiver may also close a connection without a request from the controller
to do so and without terminating a presentation.  If it does so, it should send
a presentation-connection-close-event to the controller with the following
values:

- connection-id: The ID of the connection that was closed

- reason: The reason the connection was closed

- error-message: A debug message suitable for a log or perhaps presented to the
user with more explanation as to why it was closed.

<!-- TODO: Why does the Presentation API spec not mention the use of the close
message? -->

<!-- TODO: Specify message ordering groups. -->


Presentation API {#presentation-api}
---------------------------------------------

This section defines how [[PRESENTATION-API|Presentation API]] uses
the messages defined in the previous sections.  
Non-browser agents can also send and receive the same messages defined here.
If so, a non-browser agent must follow the same restrictions for the
presentation-id as the a does, as defined by [[PRESENTATION-API|Presentation
API]] section 6.1 (at least 16 ASCII characters).  

When [[PRESENTATION-API|Presentation API]] [section
6.4.2](https://www.w3.org/TR/presentation-api/#sending-a-message-through-presentationconnection)
says "This list of presentation displays ... is populated based on an
implementation specific discovery mechanism", the [=controlling user
agent=] may use the mDNS, QUIC, agent-info-request, and
presentation-url-availability-request messages defined previously in
this spec to discover receivers.

When [[PRESENTATION-API|Presentation API]] [section
6.4.2](https://www.w3.org/TR/presentation-api/#the-list-of-available-presentation-displays)
says "To further save power, ... implementation specific discovery of
presentation displays can be resumed or suspended.", the [=controlling
user agent=] may use the power saving mechanism defined in the
previous section.

When [[PRESENTATION-API|Presentation API]] [section
6.3.4](https://www.w3.org/TR/presentation-api/#starting-a-presentation-connection)
says "Using an implementation specific mechanism, tell U to create a
receiving browsing context with D, presentationUrl, and I as
parameters.", U (the [=controlling user agent=]) may send a
presentation-start-request message to D (the receiver), with I for the
presentation identifier and presentationUrl for the selected
presentation URL.

When [[PRESENTATION-API|Presentation API]] [section
6.5.2](https://www.w3.org/TR/presentation-api/#sending-a-message-through-presentationconnection)
says "Using an implementation specific mechanism, transmit the
contents of messageOrData as the presentation message data and
messageType as the presentation message type to the destination
browsing context", the [=controlling user agent=] may send a
presentation-connection-message with messageOrData for the
presentation message data.  Note that the messageType is embedded in
the encoded CBOR type and does not need an additional value in the
message.

When [[PRESENTATION-API|Presentation API]] [section
6.5.6](https://www.w3.org/TR/presentation-api/#terminating-a-presentation-in-a-controlling-browsing-context)
says "Send a termination request for the presentation to its receiving user
agent using an implementation specific mechanism", the [=controlling user
agent=] may send a presentation-termination-request message.

When [[PRESENTATION-API|Presentation API]] [section
6.7.1](https://www.w3.org/TR/presentation-api/#monitoring-incoming-presentation-connections)
says "it MUST listen to and accept incoming connection requests from a
controlling browsing context using an implementation specific
mechanism", the [=receiving user agent=] must receive and process the
presentation-connection-open-request.

When [[PRESENTATION-API|Presentation API]] [section
6.7.1](https://www.w3.org/TR/presentation-api/#monitoring-incoming-presentation-connections)
says "Establish the connection between the controlling and receiving browsing
contexts using an implementation specific mechanism.", the [=receiving user
agent=], must send a presentation-connection-open-response message.


Remote Playback API Protocol {#remote-playback}
-----------------------------------------------

Issue(12): Propose control protocol for Remote
Playback API.


Security and Privacy {#security}
================================

Issue(13): Describe security architecture.

Data to be secured {#security-data}
-----------------------------------

Threat model {#security-threat}
-------------------------------

Mitigations and defenses {#security-defenses}
---------------------------------------------

Appending A: Messages
=====================

Lower type keys are used for messages we expect to be more frequent
and higher type keys are used for less frequently used messages.  This
is because on the wire lower values encode smaller.

<pre>
; type key 14
presentation-url-availability-request = {
  request
  1: [* text] ; urls
  2: microseconds ; watch-duration
  3: int ; watch-id
}

; type key 15
presentation-url-availability-response = {
  response
  1: [* url-availability] ; url-availabilities
}

; type key 103
presentation-url-availability-event = {
  1: int ; watch-id
  2: [* url] ; urls
  3: [* url-availability] ; url-availabilities
}


; idea: use HTTP response codes?
url-availability = &(
  available: 0
  unavailable: 1
  invalid: 10
)




; type key 104
presentation-start-request = {
  request
  1: text ; presentation-id
  2: text ; url
  3: text ; headers 
}

; type key 105
presentation-start-response = {
  response
  1: &result ; result
  2: uint ; connection-id
}

; type key 106
presentation-termination-request = {
  request
  1: text ; presentation-id
  2: &(
    controller-called-terminate: 10
    user-terminated-via-controller: 11
    unknown: 255
  )
 ; reason
}

; type key 107
presentation-termination-response = {
  response
  1: result ; result
}

; type key 108
presentation-termination-event = {
  1: text ; presentation-id
  2: &(
    receiver-called-terminate: 1
    user-terminated-via-receiver: 2
    controller-called-terminate: 10
    user-terminated-via-controller: 11
    receiver-replaced-presentation: 20
    receiver-idle-too-long: 30
    receiver-attempted-to-navigate: 31
    receiver-powering-down: 100
    receiver-crashed: 101
    unknown: 255
  )
}

; type key 109
presentation-connection-open-request = {
  request
  1: text ; presentation-id
  2: text ; url
}

; type key 110
presentation-connection-open-response = {
  response
  1: &result ; result
  2: uint; connection-id
}

; type key 111
presentation-connection-close-request = {
  request
  1: uint ; connection-id
}

; type key 112
presentation-connection-close-response = {
  response
  1: &result ; result
}

; type key 113
presentation-connection-close-event = {
  1: uint; connection-id
  2: &(
    close-method-called: 1
    connection-object-discarded: 10
    unrecoverable-error-while-sending-or-receiving-message: 100
  ) ; reason
  ? 3: text ; error-message
}


; type key 16
presentation-connection-message = {
  1: uint ; connection-id
  2: bytes / text ; message
}


result = (
  success: 1
  invalid-url: 10
  invalid-presentation-id: 11
  timeout: 100
  transient-error: 101
  permanent-error: 102
  terminating: 103
  unknown-error: 199
)

</pre>
